{
    "GetLabelSize": {
        "body": [
            "Func _GetLabelSize(\\$sLabel, \\$sWidthOrHeight = 'w', \\$iSize = 9, \\$iWeight = 400, \\$sFontName = '')",
            "    Local \\$hWnd       = GUICreate(\\$sLabel, 0, 0, 0, 0, BitOR(0x80000000, 0x20000000), BitOR(0x00000080, 0x00000020))",
            "    Local \\$hGuiSwitch = GUISwitch(\\$hWnd)",
            "",
            "    GUISetFont(\\$iSize, \\$iWeight, -1, \\$sFontName, \\$hWnd)",
            "",
            "    Local \\$aCtrlSize  = ControlGetPos(\\$hWnd, '', GUICtrlCreateLabel(\\$sLabel, 0, 0))",
            "",
            "    GUIDelete(\\$hWnd)",
            "    GUISwitch(\\$hGuiSwitch)",
            "",
            "    If \\$sWidthOrHeight == 'w' Then Return \\$aCtrlSize[2]",
            "    If \\$sWidthOrHeight == 'h' Then Return \\$aCtrlSize[3]",
            "EndFunc"
        ],
        "description": "Get the label size (with or height in pixel).",
        "prefix": "!_GetLabelSize"
    },
    "GetMouseWheelMovementDirection": {
        "body": [
            "Global Const \\$GUI_EVENT_CLOSE = -3",
            "Global Const \\$WM_MOUSEWHEEL   = 0x020A",
            "",
            "GUICreate('', 150, 150)",
            "GUICtrlCreateLabel('Direction', 15, 15)",
            "GUISetState(@SW_SHOW)",
            "",
            "GUIRegisterMsg(\\$WM_MOUSEWHEEL, '_GetMouseWheelMovementDirection')",
            "",
            "Func _GetMouseWheelMovementDirection(\\$hWnd, \\$iMsg, \\$wParam, \\$lParam)",
            "    Local Const \\$iDelta = 120",
            "    Local Const \\$iShift = 16",
            "",
            "    Local \\$iDirection = BitShift(\\$wParam, \\$iShift) / \\$iDelta",
            "    Local \\$iControlIdOfTheLabel = 3",
            "",
            "    If \\$iDirection < 0 Then",
            "        GUICtrlSetData(\\$iControlIdOfTheLabel, 'Down')",
            "    Else",
            "        GUICtrlSetData(\\$iControlIdOfTheLabel, 'Up')",
            "    EndIf",
            "EndFunc",
            "",
            "While True",
            "    Switch GUIGetMsg()",
            "        Case \\$GUI_EVENT_CLOSE",
            "            ExitLoop",
            "    EndSwitch",
            "WEnd"
        ],
        "description": "Get the mouse wheel movement direction (mouse wheel detection) on the created GUI.",
        "prefix": "!_GetMouseWheelMovementDirection"
    },
    "GetRandomColor": {
        "body": [
            "Func _GetRandomColor(\\$bFormatAsVariantHex = False)",
            "    Local \\$iRed = 1, \\$iGreen = 2, \\$iBlue = 3",
            "    Local \\$iRadian = Random(0, 100000)",
            "    Local \\$sFormat = '#'",
            "",
            "    If \\$bFormatAsVariantHex Then",
            "        \\$sFormat = '0x'",
            "    EndIf",
            "",
            "    Return \\$sFormat & _",
            "        Hex(255 * ((Sin(\\$iRadian * \\$iRed) + 1) / 2), 2) & _",
            "        Hex(255 * ((Sin(\\$iRadian * \\$iGreen) + 1) / 2), 2) & _",
            "        Hex(255 * ((Sin(\\$iRadian * \\$iBlue) + 1) / 2), 2)",
            "EndFunc"
        ],
        "description": "Get random color as html hex color (#) or as variant color (0x).",
        "prefix": "!_GetRandomColor"
    },
    "GetTaskbarHeight": {
        "body": [
            "Func _GetTaskbarHeight()",
            "    Opt('WinTitleMatchMode', 4)",
            "",
            "    Return WinGetPos('classname=Shell_TrayWnd')[3]",
            "EndFunc"
        ],
        "description": "Get the height of windows taskbar.",
        "prefix": "!_GetTaskbarHeight"
    },
    "GetWindowHandle": {
        "body": [
            "Func _GetWindowHandle(\\$sTitle)",
            "    Local \\$aListOfOpenWindows = WinList()",
            "",
            "    For \\$i = 1 To \\$aListOfOpenWindows[0][0] Step 1",
            "        If StringInStr(\\$aListOfOpenWindows[\\$i][0], \\$sTitle, 2) <> 0 Then Return \\$aListOfOpenWindows[\\$i][1]",
            "    Next",
            "",
            "    Return False",
            "EndFunc"
        ],
        "description": "Get window handle by title.",
        "prefix": "!_GetWindowHandle"
    },
    "GuiAllowedInputs": {
        "body": [
            "Func _GuiAllowedInputs(\\$cControl, \\$sAllowedPattern, \\$iReturnValue = 1)",
            "    Local \\$sControlData = GUICtrlRead(\\$cControl)",
            "",
            "    If StringRegExp(\\$sControlData, \\$sAllowedPattern, 0) == \\$iReturnValue Then",
            "        Return GUICtrlSetData(\\$cControl, StringTrimRight(\\$sControlData, 1))",
            "    EndIf",
            "EndFunc"
        ],
        "description": "Control GUI input data by allowed input values (keystrokes).",
        "prefix": "!_GuiAllowedInputs"
    },
    "GuiAnimation": {
        "body": [
            "Global Const \\$GUI_SLIDE_BOTTOM_TO_TOP = 0x00040008",
            "Global Const \\$GUI_SLIDE_TOP_TO_BOTTOM = 0x00050004",
            "",
            "_GuiAnimation(\\$hGui, \\$GUI_SLIDE_BOTTOM_TO_TOP)",
            "",
            "Func _GuiAnimation(\\$hWindow, \\$vEffect, \\$iDuration = 400)",
            "    DllCall('user32.dll', 'int', 'AnimateWindow', 'hwnd', \\$hWindow, 'int', \\$iDuration, 'long', \\$vEffect)",
            "EndFunc"
        ],
        "description": "Animates GUI appearance or disappearance by specific slide animations.",
        "prefix": "!_GuiAnimation"
    },
    "GuiControlCreateBorder": {
        "body": [
            "Func _GuiControlCreateBorder(\\$iWidth, \\$iHeight, \\$iBorderSize = 1, \\$vBorderColor =  0x21252B)",
            "    \\$iBorderTop    = GUICtrlCreateLabel('', 0, 0, \\$iWidth, \\$iBorderSize)",
            "    \\$iBorderRight  = GUICtrlCreateLabel('', \\$iWidth - \\$iBorderSize, 0, \\$iBorderSize, \\$iHeight)",
            "    \\$iBorderBottom = GUICtrlCreateLabel('', 0, \\$iHeight - \\$iBorderSize, \\$iWidth, \\$iBorderSize)",
            "    \\$iBorderLeft   = GUICtrlCreateLabel('', 0, 0, \\$iBorderSize, \\$iHeight)",
            "",
            "    GUICtrlSetBkColor(\\$iBorderTop, \\$vBorderColor)",
            "    GUICtrlSetBkColor(\\$iBorderRight, \\$vBorderColor)",
            "    GUICtrlSetBkColor(\\$iBorderBottom, \\$vBorderColor)",
            "    GUICtrlSetBkColor(\\$iBorderLeft, \\$vBorderColor)",
            "EndFunc"
        ],
        "description": "Creates a colored border for a specific control like label or for the whole GUI.",
        "prefix": "!_GuiControlCreateBorder"
    },
    "GuiFadeIn": {
        "body": [
            "Func _GuiFadeIn(\\$hGui, \\$iSleep = 10)",
            "    For \\$i = 0 To 255 Step 5",
            "        WinSetTrans(\\$hGui, '', \\$i)",
            "        Sleep(\\$iSleep)",
            "    Next",
            "EndFunc"
        ],
        "description": "Fade GUI window in.",
        "prefix": "!_GuiFadeIn"
    },
    "GuiFadeOut": {
        "body": [
            "Func _GuiFadeOut(\\$hGui, \\$iSleep = 10)",
            "    For \\$i = 255 To 0 Step -5",
            "        WinSetTrans(\\$hGui, '', \\$i)",
            "        Sleep(\\$iSleep)",
            "    Next",
            "EndFunc"
        ],
        "description": "Fade GUI window out.",
        "prefix": "!_GuiFadeOut"
    },
    "GuiInputFilterWMCommand": {
        "body": [
            "; example ------------------------------",
            "; #include-once",
            "; #include <GUIConstantsEx.au3>",
            "; #include <WinAPI.au3>",
            "; #include <WindowsConstants.au3>",
            ";",
            "; Global \\$oMain = GUICreate('_GuiAllowedInputs', 300, 90, -1, -1)",
            "; Global \\$cInp1 = GUICtrlCreateInput('', 5, 5, 290)",
            "; Global \\$cInp2 = GUICtrlCreateInput('', 5, 35, 290)",
            "; Global \\$cInp3 = GUICtrlCreateInput('', 5, 65, 290)",
            "; GUISetState(@SW_SHOW, \\$oMain)",
            ";",
            "; GUIRegisterMsg(\\$WM_COMMAND, '_GuiInputFilterWMCommand')",
            ";",
            "; While True",
            ";     Switch GUIGetMsg()",
            ";         Case \\$GUI_EVENT_CLOSE",
            ";             GUIDelete(\\$oMain)",
            ";",
            ";             Exit",
            ";     EndSwitch",
            "; WEnd",
            "; --------------------------------------",
            "Func _GuiInputFilterWMCommand(\\$hWnd, \\$iMsg, \\$iwParam, \\$ilParam)",
            "    Switch \\$ilParam",
            "        Case GUICtrlGetHandle(\\$cInp1), GUICtrlGetHandle(\\$cInp2), GUICtrlGetHandle(\\$cInp3)",
            "            Switch _WinAPI_HiWord(\\$iwParam)",
            "                Case 0x300",
            "                    _GuiAllowedInputs(\\$cInp1, '\\D', 1)             ; just numbers",
            "                    _GuiAllowedInputs(\\$cInp2, '\\d', 1)             ; just letters",
            "                    _GuiAllowedInputs(\\$cInp3, '^\\d+,?(\\d+)?$', 0) ; just money (DE format)",
            "            EndSwitch",
            "    EndSwitch",
            "",
            "    Return \\$GUI_RUNDEFMSG",
            "EndFunc"
        ],
        "description": "Watch and filter specific GUI input controls by specific RegEx pattern.",
        "prefix": "!_GuiInputFilterWMCommand"
    },
    "GuiSetWinToCenter": {
        "body": [
            "Func _GuiSetWinToCenter(\\$hWin, \\$sTitle = '', \\$iWWindow = @DesktopWidth, \\$iHWindow = @DesktopHeight)",
            "    Local \\$aSize  = WinGetClientSize(\\$hWin, \\$sTitle)",
            "    Local \\$iSizeX = (\\$iWWindow / 2) - (\\$aSize[0] / 2)",
            "    Local \\$iSizeY = (\\$iHWindow / 2) - (\\$aSize[1] / 2)",
            "",
            "    Return WinMove(\\$hWin, \\$sTitle, \\$iSizeX, \\$iSizeY)",
            "EndFunc"
        ],
        "description": "Set window to center on screen.",
        "prefix": "!_GuiSetWinToCenter"
    },
    "GuiWindowShakeAsHint": {
        "body": [
            "Func _GuiWindowShakeAsHint(\\$sTitle, \\$iDistance = 20, \\$sSleep = 90)",
            "    Local \\$hWin    = WinGetHandle(\\$sTitle)",
            "    Local \\$aWinPos = WinGetPos(\\$hWin)",
            "    Local \\$aArray[5] = [4, \\$aWinPos[0] + \\$iDistance, \\$aWinPos[0], \\$aWinPos[0] + \\$iDistance, \\$aWinPos[0]]",
            "",
            "    WinActivate(\\$sTitle)",
            "    For \\$i = 1 To \\$aArray[0] Step 1",
            "        WinMove(\\$hWin, '', \\$aArray[\\$i], Default)",
            "        Sleep(\\$sSleep)",
            "    Next",
            "EndFunc"
        ],
        "description": "Let the window shake a bit as a popup hint.",
        "prefix": "!_GuiWindowShakeAsHint"
    },
    "IsFocusOnGui": {
        "body": [
            "Func _IsFocusOnGui(\\$hGuiOrTitle)",
            "    Local Const \\$iStateOfFocusedWindow = 15",
            "",
            "    Return WinGetState(\\$hGuiOrTitle) == \\$iStateOfFocusedWindow",
            "EndFunc"
        ],
        "description": "Is given GUI in focus (window exists, window is visible, window is enabled and window is active).",
        "prefix": "!_IsFocusOnGui"
    },
    "IsMouseOnGui": {
        "body": [
            "Func _IsMouseOnGui(\\$hGui)",
            "    Local \\$aMouse = MouseGetPos()",
            "    Local \\$aGui   = WinGetPos(\\$hGui)",
            "",
            "    If \\$aMouse[0] >= \\$aGui[0] And _",
            "       \\$aMouse[1] >= \\$aGui[1] And _",
            "       \\$aMouse[0] <= \\$aGui[0] + \\$aGui[2] And _",
            "       \\$aMouse[1] <= \\$aGui[1] + \\$aGui[3] Then",
            "       Return True",
            "    EndIf",
            "",
            "    Return False",
            "EndFunc"
        ],
        "description": "Is mouse over the GUI.",
        "prefix": "!_IsMouseOnGui"
    },
    "SetVisualStateOfStartBar": {
        "body": [
            "Func _SetVisualStateOfStartBar(\\$bShouldBeVisible)",
            "    If \\$bShouldBeVisible Then",
            "        _StartBarToggle('@SW_HIDE')",
            "    Else",
            "        _StartBarToggle('@SW_MAXIMIZE')",
            "    EndIf",
            "EndFunc"
        ],
        "description": "Toggle visual state of the windows start bar.",
        "prefix": "!_SetVisualStateOfStartBar"
    },
    "ShowToolTipInfo": {
        "body": [
            "Func _ShowToolTipInfo(\\$sInfo)",
            "    ToolTip(@CRLF & @TAB & @TAB & \\$sInfo & @TAB & @TAB & @CRLF & ' ', 5, 5)",
            "EndFunc"
        ],
        "description": "Show tool tip text with padding.",
        "prefix": "!_ShowToolTipInfo"
    },
    "StartBarToggle": {
        "body": [
            "Func _StartBarToggle(\\$sState)",
            "    WinSetState('classname=Shell_TrayWnd', '', Execute(\\$sState))",
            "    ControlHide('classname=Button', '', '')",
            "EndFunc"
        ],
        "description": "Show or hide windows start bar.",
        "prefix": "!_StartBarToggle"
    },
    "ToggleControlVisibility": {
        "body": [
            "Func _ToggleControlVisibility(\\$iControlId)",
            "    Local \\$aState[] = _",
            "        [ _",
            "            \\$GUI_SHOW, _",
            "            \\$GUI_HIDE _",
            "        ]",
            "",
            "    GUICtrlSetState(\\$iControlID, \\$aState[Number(BitAND(GUICtrlGetState(\\$iControlID), \\$aState[0]) = \\$aState[0])])",
            "EndFunc"
        ],
        "description": "Toggle the visibility of an control depending of it's current state.",
        "prefix": "!_ToggleControlVisibility"
    }
}
