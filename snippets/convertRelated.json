{
    "Base64ToBinary": {
        "body": [
            "Func _Base64ToBinary(\\$sBase64)",
            "    \\$sBase64 = StringReplace(\\$sBase64, @CRLF, '')",
            "",
            "    Local \\$aCrypt  = DllCall('Crypt32.dll', 'bool', 'CryptStringToBinaryA', 'str', \\$sBase64, 'dword', 0, 'dword', 1, 'ptr', 0, 'dword*', 0, 'ptr', 0, 'ptr', 0)",
            "    Local \\$bBuffer = DllStructCreate('byte[' & \\$aCrypt[5] & ']')",
            "",
            "    \\$aCrypt = DllCall('Crypt32.dll', 'bool', 'CryptStringToBinaryA', 'str', \\$sBase64, 'dword', 0, 'dword', 1, 'struct*', \\$bBuffer, 'dword*', \\$aCrypt[5], 'ptr', 0, 'ptr', 0)",
            "",
            "    Return Binary(DllStructGetData(\\$bBuffer, 1))",
            "EndFunc"
        ],
        "description": "Convert a Base64 string to a binary string (vString).",
        "prefix": "!_Base64ToBinary"
    },
    "BinaryToBase64": {
        "body": [
            "Func _BinaryToBase64(\\$sFilePath)",
            "    Local Const \\$iBinaryMode = 16",
            "",
            "    Local \\$hFile        = FileOpen(\\$sFilePath, \\$iBinaryMode)",
            "    Local \\$vFileContent = FileRead(\\$hFile)",
            "    FileClose(\\$hFile)",
            "",
            "    Local \\$oXml           = ObjCreate('MSXML2.DOMDocument')",
            "    Local \\$oNode          = \\$oXml.createElement('b64')",
            "    \\$oNode.dataType       = 'bin.base64'",
            "    \\$oNode.nodeTypedValue = \\$vFileContent",
            "",
            "    Return StringReplace(\\$oNode.Text, @LF, '')",
            "EndFunc"
        ],
        "description": "Reads a binary file and convert to Base64 string.",
        "prefix": "!_BinaryToBase64"
    },
    "ConvertBinToInt": {
        "body": [
            "Func _ConvertBinToInt(\\$vBin)",
            "    Local \\$iInt, \\$j = 1",
            "    Local \\$aTmp = StringSplit(StringReverse(\\$vBin), '')",
            "",
            "    For \\$i = 1 To UBound(\\$aTmp) - 1 Step 1",
            "        \\$iInt += \\$aTmp[\\$i] * \\$j",
            "        \\$j *= 2",
            "    Next",
            "",
            "    \\$aTmp = 0",
            "",
            "    Return StringFormat('%.0f', \\$iInt)",
            "EndFunc"
        ],
        "description": "Convert binary to integer.",
        "prefix": "!_ConvertBinToInt"
    },
    "ConvertHexToInt": {
        "body": [
            "Func _ConvertHexToInt(\\$vHex)",
            "    Return Int(\\$vHex)",
            "EndFunc"
        ],
        "description": "Convert hex to integer.",
        "prefix": "!_ConvertHexToInt"
    },
    "ConvertIntToBin": {
        "body": [
            "Func _ConvertIntToBin(\\$i)",
            "    If \\$i == 0 Then Return 0",
            "",
            "    Local \\$vBin",
            "    While \\$i > 0",
            "        \\$vBin &= Mod(\\$i, 2)",
            "        \\$i     = Floor(\\$i / 2)",
            "    WEnd",
            "",
            "    Return(StringReverse(\\$vBin))",
            "EndFunc"
        ],
        "description": "Convert integer to binary.",
        "prefix": "!_ConvertIntToBin"
    },
    "ConvertIntToHex": {
        "body": [
            "Func _ConvertIntToHex(\\$i)",
            "    Local \\$vHex",
            "    Local \\$aHex[] = _",
            "        [ _",
            "            0, 1, 2, 3, 4, 5 ,6 ,7 ,8, 9, _",
            "            'A', 'B', 'C', 'D', 'E', 'F' _",
            "        ]",
            "",
            "    While 1",
            "        \\$vHex &= \\$aHex[Mod(\\$i, 0x10)]",
            "        \\$i     = Floor(\\$i / 0x10)",
            "        If Not \\$i Then ExitLoop",
            "    WEnd",
            "",
            "    Return StringReverse(\\$vHex)",
            "EndFunc"
        ],
        "description": "Convert integer to hex.",
        "prefix": "!_ConvertIntToHex"
    },
    "ConvertIntToOct": {
        "body": [
            "Func _ConvertIntToOct(\\$i)",
            "    Local \\$iOct",
            "",
            "    While 1",
            "        \\$iOct &= Mod(\\$i, 0x8)",
            "        \\$i     = Floor(\\$i / 0x8)",
            "        If Not \\$i Then ExitLoop",
            "    WEnd",
            "",
            "    Return StringReverse(\\$iOct)",
            "EndFunc"
        ],
        "description": "Convert integer to octal number.",
        "prefix": "!_ConvertIntToOct"
    },
    "HexColorInvert": {
        "body": [
            "Func _HexColorInvert(\\$vHexCode)",
            "    Return '0x' & Hex (0xFFFFFF - \\$vHexCode, 6)",
            "EndFunc"
        ],
        "description": "Invert the given hex color.",
        "prefix": "!_HexColorInvert"
    }
}
