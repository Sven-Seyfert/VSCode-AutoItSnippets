{
    "AddBackslashToPathEnd": {
        "body": [
            "Func _AddBackslashToPathEnd(\\$sPath)",
            "    If StringRight(\\$sPath, 1) <> '\\' Then \\$sPath &= '\\'",
            "",
            "    Return \\$sPath",
            "EndFunc"
        ],
        "description": "Ensure trailing backslash for a path.",
        "prefix": "!_AddBackslashToPathEnd"
    },
    "AppendToFile": {
        "body": [
            "Func _AppendToFile(\\$sFile, \\$sText)",
            "    Local Const \\$iUtf8WithoutBomAndAppendMode = 256 + 1",
            "",
            "    Local \\$hFile = FileOpen(\\$sFile, \\$iUtf8WithoutBomAndAppendMode)",
            "    FileWrite(\\$hFile, \\$sText)",
            "    FileClose(\\$hFile)",
            "EndFunc"
        ],
        "description": "Append text to file.",
        "prefix": "!_AppendToFile"
    },
    "CreateFileWithSpecificSize": {
        "body": [
            "Func _CreateFileWithSpecificSize(\\$iSize = 5, \\$sUnit = 'MB', \\$sPath = @ScriptDir & '\\', \\$sFile = 'SpecificFile.tmp')",
            "    DllCall('kernel32.dll', 'int', 'Wow64DisableWow64FsRedirection', 'int', 1)",
            "",
            "    Local \\$iByteSize",
            "    Select",
            "        Case \\$sUnit = 'B'",
            "            \\$iByteSize = Int(\\$iSize * 1024 ^ 0)",
            "        Case \\$sUnit = 'KB'",
            "            \\$iByteSize = Int(\\$iSize * 1024 ^ 1)",
            "        Case \\$sUnit = 'MB'",
            "            \\$iByteSize = Int(\\$iSize * 1024 ^ 2)",
            "        Case \\$sUnit = 'GB'",
            "            \\$iByteSize = Int(\\$iSize * 1024 ^ 3)",
            "        Case \\$sUnit = 'TB'",
            "            \\$iByteSize = Int(\\$iSize * 1024 ^ 4)",
            "        Case Else",
            "    EndSelect",
            "",
            "    ShellExecuteWait(@ComSpec, '/C fsutil file createnew \"' & \\$sPath & \\$sFile & '\" ' & \\$iByteSize, '', 'runas', @SW_HIDE)",
            "    If FileExists(\\$sFile) Then FileMove(\\$sPath & \\$sFile, \\$sPath & \\$iSize & \\$sUnit & '_' & \\$sFile)",
            "EndFunc"
        ],
        "description": "Create a dummy file with a specific file size.",
        "prefix": "!_CreateFileWithSpecificSize"
    },
    "ExistsNotAllowedCharacters": {
        "body": [
            "Func _ExistsNotAllowedCharacters(\\$sString)",
            "    If StringInStr(\\$sString, '\\') <> 0 Then Return True",
            "    If StringInStr(\\$sString, '/')  <> 0 Then Return True",
            "    If StringInStr(\\$sString, ':')  <> 0 Then Return True",
            "    If StringInStr(\\$sString, '*')  <> 0 Then Return True",
            "    If StringInStr(\\$sString, '?')  <> 0 Then Return True",
            "    If StringInStr(\\$sString, '\"') <> 0 Then Return True",
            "    If StringInStr(\\$sString, '<')  <> 0 Then Return True",
            "    If StringInStr(\\$sString, '>')  <> 0 Then Return True",
            "    If StringInStr(\\$sString, '|')  <> 0 Then Return True",
            "    Return False",
            "EndFunc"
        ],
        "description": "Check string for not allowed characters regarding a file renaming action.",
        "prefix": "!_ExistsNotAllowedCharacters"
    },
    "FileExistsBranch": {
        "body": [
            "Func _FileExistsBranch(\\$sFileOrPath)",
            "    If FileExists(\\$sFileOrPath) Then",
            "        ; ...",
            "    Else",
            "        ; ...",
            "    EndIf",
            "EndFunc"
        ],
        "description": "Check condition for file or directory exists.",
        "prefix": "!_FileExistsBranch"
    },
    "GetFileContent": {
        "body": [
            "Func _GetFileContent(\\$sFile)",
            "    Local Const \\$iUtf8WithoutBomMode = 256",
            "",
            "    Local \\$hFile        = FileOpen(\\$sFile, \\$iUtf8WithoutBomMode)",
            "    Local \\$sFileContent = FileRead(\\$hFile)",
            "    FileClose(\\$hFile)",
            "",
            "    Return \\$sFileContent",
            "EndFunc"
        ],
        "description": "Get file content to string.",
        "prefix": "!_GetFileContent"
    },
    "GetFileProperties": {
        "body": [
            "Func _GetFileProperties(\\$sDirectory, \\$sFileName, \\$bRemoveEmptyLines = True)",
            "    Local \\$oShellApp           = ObjCreate('Shell.Application')",
            "    Local \\$oFolder             = \\$oShellApp.NameSpace(\\$sDirectory)",
            "    Local \\$oFolderItem         = \\$oFolder.Parsename(\\$sFileName)",
            "    Local \\$aPropertyList[1][2] = [[1]]",
            "",
            "    For \\$i = 0 To 400 Step 1",
            "        If \\$oFolder.GetDetailsOf(\\$oFolder.Items, \\$i) Then",
            "            ReDim \\$aPropertyList[\\$aPropertyList[0][0] + 1][2]",
            "            \\$aPropertyList[\\$aPropertyList[0][0]][0] = \\$oFolder.GetDetailsOf(\\$oFolder.Items, \\$i)",
            "            \\$aPropertyList[\\$aPropertyList[0][0]][1] = \\$oFolder.GetDetailsOf(\\$oFolderItem, \\$i)",
            "            \\$aPropertyList[0][0] += 1",
            "        EndIf",
            "    Next",
            "    _ArraySort(\\$aPropertyList, 0, 1, 0)",
            "",
            "    If \\$bRemoveEmptyLines Then",
            "        For \\$i = \\$aPropertyList[0][0] - 1 To 1 Step - 1",
            "            If \\$aPropertyList[\\$i][1] == '' Then _ArrayDelete(\\$aPropertyList, \\$i)",
            "        Next",
            "    EndIf",
            "",
            "    \\$aPropertyList[0][0] = UBound(\\$aPropertyList, 1) - 1",
            "",
            "    Return \\$aPropertyList",
            "EndFunc"
        ],
        "description": "Get all possible file properties to array.",
        "prefix": "!_GetFileProperties"
    },
    "GetFilePropertyValue": {
        "body": [
            "Func _GetFilePropertyValue(\\$sFile, \\$sPropertyKey)",
            "    Local \\$oShellApp      = ObjCreate('Shell.Application')",
            "    Local \\$oFolder        = \\$oShellApp.NameSpace(_GetJustPathOfFile(\\$sFile))",
            "    Local \\$oFileName      = \\$oFolder.Parsename(_GetJustFileName(\\$sFile))",
            "    Local \\$sPropertyValue = ''",
            "",
            "    For \\$i = 0 To 400 Step 1",
            "        If \\$oFolder.GetDetailsOf(\\$oFolder.Items, \\$i) == \\$sPropertyKey Then",
            "            \\$sPropertyValue = \\$oFolder.GetDetailsOf(\\$oFileName, \\$i)",
            "            ExitLoop",
            "        EndIf",
            "    Next",
            "",
            "    Return \\$sPropertyValue == '' ? '-' : \\$sPropertyValue",
            "EndFunc"
        ],
        "description": "Get specific file property value.",
        "prefix": "!_GetFilePropertyValue"
    },
    "GetFileShare": {
        "body": [
            "Func _GetFileShare()",
            "    Local \\$oWMIService = ObjGet('winmgmts:\\\\\\.\\root\\CIMV2')",
            "    Local \\$oColItems   = \\$oWMIService.ExecQuery('SELECT * FROM Win32_Share')",
            "    Local \\$aFileShares[1]",
            "",
            "    For \\$sObjItem in \\$oColItems",
            "        _ArrayAdd(\\$aFileShares, \\$sObjItem.Name)",
            "        _ArrayAdd(\\$aFileShares, \\$sObjItem.Path)",
            "        _ArrayAdd(\\$aFileShares, \\$sObjItem.Description)",
            "        _ArrayAdd(\\$aFileShares, \\$sObjItem.Status)",
            "    Next",
            "",
            "    Return \\$aFileShares",
            "EndFunc"
        ],
        "description": "Get a list of FileShares as array.",
        "prefix": "!_GetFileShare"
    },
    "GetJustFileExtension": {
        "body": [
            "Func _GetJustFileExtension(\\$sFileName)",
            "    Return StringReverse(_StringBetween(StringReverse(\\$sFileName), '', '.')[0])",
            "EndFunc"
        ],
        "description": "Get just the file extension of a file name or file path.",
        "prefix": "!_GetJustFileExtension"
    },
    "GetJustFileName": {
        "body": [
            "Func _GetJustFileName(\\$sFilePath)",
            "    Return StringRegExpReplace(\\$sFilePath, '(.+?)\\\\\\', '', 0)",
            "EndFunc"
        ],
        "description": "Get just the file name of a file path (including the file extension).",
        "prefix": "!_GetJustFileName"
    },
    "GetJustPathOfFile": {
        "body": [
            "Func _GetJustPathOfFile(\\$sFilePath)",
            "    Return StringTrimRight(\\$sFilePath, StringLen(_GetJustFileName(\\$sFilePath)))",
            "EndFunc"
        ],
        "description": "Get just the path of a file.",
        "prefix": "!_GetJustPathOfFile"
    },
    "IsFileInUse": {
        "body": [
            "Func _IsFileInUse(\\$sFile)",
            "    Local \\$vGENERIC_READ          = 0x80000000",
            "    Local \\$vGENERIC_WRITE         = 0x40000000",
            "    Local \\$vFILE_ATTRIBUTE_NORMAL = 0x80",
            "    Local \\$iOPEN_EXISTING         = 3",
            "    Local \\$iDA                    = BitOR(\\$vGENERIC_READ, \\$vGENERIC_WRITE)",
            "",
            "    Local \\$aRet = DllCall('Kernel32.dll', 'hwnd', 'CreateFile', 'str', \\$sFile, 'dword', \\$iDA, 'dword', _",
            "        0x00000000, 'dword', 0x00000000, 'dword', \\$iOPEN_EXISTING, 'dword', \\$vFILE_ATTRIBUTE_NORMAL, 'hwnd', 0)",
            "",
            "    Local \\$iError = @error",
            "    If @error Or IsArray(\\$aRet) == 0 Then Return SetError(\\$iError, 0, -1)",
            "",
            "    Local \\$hFile = \\$aRet[0]",
            "",
            "    If \\$hFile = -1 Then",
            "        \\$aRet = DllCall('Kernel32.dll', 'int', 'GetLastError')",
            "        If @error Or IsArray(\\$aRet) == 0 Then Return SetError(\\$iError, 0, 1)",
            "",
            "        Return SetError(\\$aRet[0], 0, True)",
            "    Else",
            "        DllCall('Kernel32.dll', 'int', 'CloseHandle', 'hwnd', \\$hFile)",
            "",
            "        Return SetError(@error, 0, False)",
            "    EndIf",
            "EndFunc"
        ],
        "description": "Check is file in use by another process.",
        "prefix": "!_IsFileInUse"
    },
    "OpenFolder": {
        "body": [
            "Func _OpenFolder(\\$sFolderPath = @DesktopDir)",
            "    ShellExecute(\\$sFolderPath)",
            "EndFunc"
        ],
        "description": "Open a given folder.",
        "prefix": "!_OpenFolder"
    },
    "RelativeToAbsolutePath": {
        "body": [
            "Func _RelativeToAbsolutePath(\\$sRelativePath)",
            "    Local \\$aPathHierarchy = StringRegExp(\\$sRelativePath, '(.+?)\\\\\\', 3)",
            "    Local \\$iRelativeCount = 0",
            "",
            "    For \\$i = 0 To UBound(\\$aPathHierarchy) - 1 Step 1",
            "        If \\$aPathHierarchy[\\$i] == '..' Then \\$iRelativeCount += 1",
            "    Next",
            "",
            "    If \\$iRelativeCount > 0 Then",
            "        Local \\$sNewPath      = StringReverse(@ScriptDir)",
            "        Local \\$sRelativePart = _StringRepeat('..\\', \\$iRelativeCount)",
            "",
            "        \\$sNewPath = StringRegExpReplace(\\$sNewPath, '(.+?)\\\\\\', '', \\$iRelativeCount)",
            "        \\$sNewPath = StringReverse(\\$sNewPath) & '\\'",
            "",
            "        Return StringReplace(\\$sRelativePath, \\$sRelativePart, \\$sNewPath)",
            "    Else",
            "        Return \\$sRelativePath",
            "    EndIf",
            "EndFunc"
        ],
        "description": "Resolve relative path to absolute path.",
        "prefix": "!_RelativeToAbsolutePath"
    },
    "SaveBinaryToFile": {
        "body": [
            "Func _SaveBinaryToFile(\\$vString, \\$sFilePath)",
            "    Local Const \\$iBinaryAndWriteMode = 16 + 2",
            "",
            "    Local \\$hFile = FileOpen(\\$sFilePath, \\$iBinaryAndWriteMode)",
            "    FileWrite(\\$hFile, \\$vString)",
            "    FileClose(\\$hFile)",
            "EndFunc"
        ],
        "description": "Create a binary file out of a binary string (vString). See _Base64ToBinary function.",
        "prefix": "!_SaveBinaryToFile"
    },
    "SetMaxDirectories": {
        "body": [
            "Func _SetMaxDirectories(\\$sPath, \\$i = 10)",
            "    Local \\$aListOfPaths = _FileListToArray(\\$sPath, '*', 2, True)",
            "    If IsArray(\\$aListOfPaths) == 1 Then",
            "        If \\$aListOfPaths[0] >= \\$i Then",
            "            DirRemove(\\$aListOfPaths[1], 1)",
            "        EndIf",
            "    EndIf",
            "EndFunc"
        ],
        "description": "Remove directories until the maximum count of directories is reached (e. g. for log directories with a timestamp as name).",
        "prefix": "!_SetMaxDirectories"
    },
    "SetMaxFiles": {
        "body": [
            "Func _SetMaxFiles(\\$sPath, \\$i = 10, \\$sFileExtension = 'log')",
            "    Local \\$aListOfFiles = _FileListToArray(\\$sPath, '*.' & \\$sFileExtension, 1, True)",
            "    If IsArray(\\$aListOfFiles) Then",
            "        If \\$aListOfFiles[0] >= \\$i Then",
            "            FileDelete(\\$aListOfFiles[1])",
            "        EndIf",
            "    EndIf",
            "EndFunc"
        ],
        "description": "Remove files until the maximum count of files is reached (e. g. for log files with a timestamp as name).",
        "prefix": "!_SetMaxFiles"
    },
    "SortFileByAscOrDesc": {
        "body": [
            "Func _SortFileByAscOrDesc(\\$sFile, \\$iAscOrDesc = 0)",
            "    Local \\$sFileContent = _GetFileContent(\\$sFile)",
            "    Local \\$aFileContent = StringSplit(\\$sFileContent, @CRLF, 1)",
            "",
            "    _ArrayDelete(\\$aFileContent, 0)",
            "    _ArraySort(\\$aFileContent, \\$iAscOrDesc, 1)",
            "",
            "    Local \\$sText = _ArrayToString(\\$aFileContent, @CRLF)",
            "    If @error <> 0 Then",
            "        ; ...",
            "    EndIf",
            "",
            "    _WriteFile(\\$sFile, \\$sText)",
            "EndFunc"
        ],
        "description": "Sort file content ascending or descending.",
        "prefix": "!_SortFileByAscOrDesc"
    },
    "WriteFile": {
        "body": [
            "Func _WriteFile(\\$sFile, \\$sText)",
            "    Local Const \\$iUtf8WithoutBomAndOverwriteCreationMode = 256 + 2 + 8",
            "",
            "    Local \\$hFile = FileOpen(\\$sFile, \\$iUtf8WithoutBomAndOverwriteCreationMode)",
            "    FileWrite(\\$hFile, \\$sText)",
            "    FileClose(\\$hFile)",
            "EndFunc"
        ],
        "description": "Create or overwrite a file with the given content.",
        "prefix": "!_WriteFile"
    }
}
