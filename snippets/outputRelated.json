{
    "ConsoleWriteUnicodeChars": {
        "body": [
            "Func _ConsoleWriteUnicodeChars()",
            "    For $$i = 160 To 255",
            "        ConsoleWrite('Ascii Char Number: ' & $$i & '    Unicode: U+' & Hex(AscW(Chr($$i)), 6) & @CRLF)",
            "    Next",
            "EndFunc"
        ],
        "description": "Write Unicode characters to the console.",
        "prefix": "!_ConsoleWriteUnicodeChars"
    },
    "GetAutoItEnvironmentInfos": {
        "body": [
            "Func _GetAutoItEnvironmentInfos()",
            "    ConsoleWrite('@AutoItExe:     ' & @AutoItExe & @CRLF)",
            "    ConsoleWrite('@AutoItVersion: ' & @AutoItVersion & @CRLF)",
            "    ConsoleWrite('@CPUArch:       ' & @CPUArch & @CRLF)",
            "    ConsoleWrite('@OSArch:        ' & @OSArch & @CRLF)",
            "    ConsoleWrite('@OSVersion:     ' & @OSVersion & @CRLF)",
            "EndFunc"
        ],
        "description": "Get AutoIt environment information.",
        "prefix": "!_GetAutoItEnvironmentInfos"
    },
    "GetCommandLineOutput": {
        "body": [
            "Func _GetCommandLineOutput($$sCommand)",
            "    Local Const $$iStdErrChild = 4",
            "    Local Const $$iStdOutChild = 2",
            "",
            "    Local $$iPID    = Run('\"' & @ComSpec & '\" /c ' & $$sCommand, '', @SW_HIDE, $$iStdErrChild + $$iStdOutChild)",
            "    Local $$sOutput = ''",
            "",
            "    While True",
            "        $$sOutput &= StdoutRead($$iPID, False, False)",
            "        If @error Then",
            "            ExitLoop",
            "        EndIf",
            "",
            "        Sleep(10)",
            "    WEnd",
            "",
            "    Return $$sOutput",
            "EndFunc"
        ],
        "description": "Read command line output (result of a given command) to string.",
        "prefix": "!_GetCommandLineOutput"
    },
    "GetComputerInfos": {
        "body": [
            "Func _GetComputerInfos()",
            "    ConsoleWrite('@ComputerName:   ' & @ComputerName & @CRLF)",
            "    ConsoleWrite('@UserName:       ' & @UserName & @CRLF)",
            "    ConsoleWrite('@UserProfileDir: ' & @UserProfileDir & @CRLF)",
            "    ConsoleWrite('@StartupDir:     ' & @StartupDir & @CRLF)",
            "    ConsoleWrite('@IPAddress1:     ' & @IPAddress1 & @CRLF)",
            "    ConsoleWrite('@OSVersion:      ' & @OSVersion & @CRLF)",
            "    ConsoleWrite('@CPUArch:        ' & @CPUArch & @CRLF)",
            "    ConsoleWrite('@OSArch:         ' & @OSArch & @CRLF)",
            "    ConsoleWrite('@OSType:         ' & @OSType & @CRLF)",
            "EndFunc"
        ],
        "description": "Get computer information.",
        "prefix": "!_GetComputerInfos"
    },
    "NewLine": {
        "body": [
            "Func _NewLine($$iCount = 1)",
            "    Local $$sNewLine = null",
            "",
            "    For $$i = 1 To $$iCount Step 1",
            "        $$sNewLine &= @CRLF",
            "    Next",
            "",
            "    Return $$sNewLine",
            "EndFunc"
        ],
        "description": "Get one newline (carriage return and line feed) by default or multiple newlines by optional parameter.",
        "prefix": "!_NewLine"
    },
    "Print": {
        "body": [
            "Func _Print($$sText, $$bWithPipeBoundaries = False)",
            "    If $$bWithPipeBoundaries Then ConsoleWrite('|' & $$sText & '|' & @CRLF)",
            "    If Not $$bWithPipeBoundaries Then ConsoleWrite($$sText & @CRLF)",
            "EndFunc"
        ],
        "description": "Extends the default ConsoleWrite function by a default line break and optionally by start- and trailing pipe sign for better notice of whitespaces.",
        "prefix": "!_Print"
    }
}
