{
    "CreateRandomText": {
        "body": [
            "Func _CreateRandomText($$iLength = 10, $$iModi = 4)",
            "    Local $$sText = ''",
            "",
            "    Switch $$iModi",
            "        Case 1",
            "            Dim $$aChr[2]",
            "            For $$i = 1 To $$iLength Step 1",
            "                $$aChr[0] = Chr(Random(65, 90, 1))   ; A-Z",
            "                $$aChr[1] = Chr(Random(97, 122, 1))  ; a-z",
            "                $$sText  &= $$aChr[Random(0, 1, 1)]",
            "            Next",
            "",
            "        Case 2",
            "            For $$i = 1 To $$iLength Step 1",
            "                $$sText &= Chr(Random(48, 57, 1))     ; 0-9",
            "            Next",
            "",
            "        Case 3",
            "            Dim $$aChr[3]",
            "            For $$i = 1 To $$iLength Step 1",
            "                $$aChr[0] = Chr(Random(65, 90, 1))   ; A-Z",
            "                $$aChr[1] = Chr(Random(97, 122, 1))  ; a-z",
            "                $$aChr[2] = Chr(Random(48, 57, 1))   ; 0-9",
            "                $$sText  &= $$aChr[Random(0, 2, 1)]",
            "            Next",
            "",
            "        Case 4",
            "            For $$i = 1 To $$iLength Step 1",
            "                $$sText &= Chr(Random(33, 136, 1))    ; A-Z, a-z, 0-9 and extended chars",
            "            Next",
            "    EndSwitch",
            "",
            "    Return $$sText",
            "EndFunc"
        ],
        "description": "Create a random text (string based on different modi).",
        "prefix": "!_CreateRandomText"
    },
    "GetGuid": {
        "body": [
            "Func _GetGuid()",
            "    Local $$sGuid  = _GetGuidSegment(8)",
            "        $$sGuid &= '-' & _GetGuidSegment(4)",
            "        $$sGuid &= '-' & _GetGuidSegment(4)",
            "        $$sGuid &= '-' & _GetGuidSegment(4)",
            "        $$sGuid &= '-' & _GetGuidSegment(12)",
            "",
            "    Return $$sGuid",
            "EndFunc"
        ],
        "description": "Get a valid GUID.",
        "prefix": "!_GetGuid"
    },
    "GetGuidSegment": {
        "body": [
            "Func _GetGuidSegment($$iSegmentCount)",
            "    Local $$sGuidSegment",
            "",
            "    For $$i = 1 To $$iSegmentCount Step 1",
            "        ; Ten digits, 6 alphabetical characters",
            "        Switch Random(1, 16, 1)",
            "            Case 1 To 10",
            "                ; Character 0-9",
            "                $$sGuidSegment &= Chr(Random(48, 57, 1))",
            "",
            "            Case 11 To 16",
            "                ; Character A-F",
            "                $$sGuidSegment &= Chr(Random(65, 70, 1))",
            "        EndSwitch",
            "    Next",
            "",
            "    Return $$sGuidSegment",
            "EndFunc"
        ],
        "description": "Get GUID segment which is used in function _GetGuid.",
        "prefix": "!_GetGuidSegment"
    },
    "GetUniqueMachineGuidString": {
        "body": [
            "Func _GetUniqueMachineGuidString()",
            "    Local $$sMachineGuid = RegRead('HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography', 'MachineGuid')",
            "    $$sMachineGuid = StringReplace($$sMachineGuid, '-', '')",
            "    $$sMachineGuid = StringTrimLeft($$sMachineGuid, 5)",
            "    $$sMachineGuid = StringTrimRight($$sMachineGuid, 7)",
            "",
            "    Return StringLower($$sMachineGuid)",
            "EndFunc"
        ],
        "description": "Get unique machine guid as string.",
        "prefix": "!_GetUniqueMachineGuidString"
    },
    "NormalizeStringLength": {
        "body": [
            "Func _NormalizeStringLength($$sString, $$iMaxLength)",
            "    Local $$iLength = StringLen($$sString)",
            "    If $$iLength < $$iMaxLength Then",
            "        Return $$sString & _StringRepeat(' ', $$iMaxLength - $$iLength)",
            "    Else",
            "        Return $$sString",
            "    EndIf",
            "EndFunc"
        ],
        "description": "Normalize string length for a good looking table like output result.",
        "prefix": "!_NormalizeStringLength"
    },
    "SplitStringByCountToArray": {
        "body": [
            "Func _SplitStringByCountToArray($$sString, $$iCount = 80)",
            "    Local $$iParts = Ceiling(StringLen($$sString) / $$iCount)",
            "",
            "    Dim $$aContent[$$iParts + 1], $$x = 1",
            "",
            "    For $$i = 1 To $$iParts Step 1",
            "        $$aContent[$$i] = StringMid($$sString, $$x, $$iCount)",
            "        $$x += $$iCount",
            "    Next",
            "",
            "    $$aContent[0] = $$iParts",
            "",
            "    Return $$aContent",
            "EndFunc"
        ],
        "description": "Split a long string by defined count to an array.",
        "prefix": "!_SplitStringByCountToArray"
    },
    "StringProperWithoutSpaces": {
        "body": [
            "Func _StringProperWithoutSpaces($$sString)",
            "    Local $$sCharacter          = ''",
            "    Local $$sProperString       = ''",
            "    Local $$bIsCapitalCharacter = True",
            "    Local $$iCharactersCount    = StringLen($$sString)",
            "    Local Const $$sRegExPattern = '[a-zA-ZÀ-ÿšœžŸ]'",
            "",
            "    For $$i = 1 To $$iCharactersCount Step 1",
            "        $$sCharacter = StringMid($$sString, $$i, 1)",
            "",
            "        Select",
            "            Case $$bIsCapitalCharacter = True",
            "                If StringRegExp($$sCharacter, $$sRegExPattern) Then",
            "                    $$sCharacter = StringUpper($$sCharacter)",
            "                    $$bIsCapitalCharacter = False",
            "                EndIf",
            "",
            "            Case Not StringRegExp($$sCharacter, $$sRegExPattern)",
            "                $$bIsCapitalCharacter = True",
            "",
            "            Case Else",
            "                $$sCharacter = StringLower($$sCharacter)",
            "        EndSelect",
            "",
            "        $$sProperString &= $$sCharacter",
            "    Next",
            "",
            "    Return StringStripWS($$sProperString, 8)",
            "EndFunc"
        ],
        "description": "Reformat the given string to proper case without spaces ('This string will be reformated to proper case without spaces' => 'ThisStringWillBeReformatedToProperCaseWithoutSpaces').",
        "prefix": "!_StringProperWithoutSpaces"
    },
    "StringProperWithSpaces": {
        "body": [
            "Func _StringProperWithSpaces($$sString)",
            "    Local $$sCharacter          = ''",
            "    Local $$sProperString       = ''",
            "    Local $$iCharactersCount    = StringLen($$sString)",
            "",
            "    For $$i = 1 To $$iCharactersCount Step 1",
            "        $$sCharacter = StringMid($$sString, $$i, 1)",
            "",
            "        If StringIsUpper($$sCharacter) Then",
            "            $$sProperString &= ' ' & $$sCharacter",
            "        Else",
            "            $$sProperString &= $$sCharacter",
            "        EndIf",
            "    Next",
            "",
            "    Return StringTrimLeft($$sProperString, 1)",
            "EndFunc"
        ],
        "description": "Reformat the given string to proper case with spaces ('ThisStringWillBeReformatedToStringProperCaseWithSpaces' => 'This String Will Be Reformated To String Proper Case With Spaces').",
        "prefix": "!_StringProperWithSpaces"
    }
}
