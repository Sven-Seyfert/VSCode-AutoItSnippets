{
    "DeleteCurrentScriptAfterRun": {
        "body": [
            "Func _DeleteCurrentScriptAfterRun(\\$sCmd = @SystemDir & '\\cmd.exe')",
            "    Run(\\$sCmd & ' /C del /F /Q \"' & @ScriptFullPath & '\"', @TempDir, @SW_HIDE)",
            "EndFunc"
        ],
        "description": "Delete current script after execution (after run).",
        "prefix": "!_DeleteCurrentScriptAfterRun"
    },
    "GetMacOrIpAddress": {
        "body": [
            "Func _GetMacOrIpAddress()",
            "    Local \\$oWmiService      = ObjGet('winmgmts:{impersonationLevel=impersonate}!\\\\.\\root\\cimv2')",
            "    Local \\$oNetworkAdapters = \\$oWmiService.ExecQuery('select * from Win32_NetworkAdapterConfiguration where IPEnabled = True')",
            "",
            "    Local \\$sMacAddress = ''",
            "",
            "    For \\$oNetworkAdapter in \\$oNetworkAdapters",
            "        \\$sMacAddress = \\$oNetworkAdapter.MACAddress",
            "        If \\$sMacAddress <> '' Then ExitLoop",
            "    Next",
            "",
            "    Return \\$sMacAddress <> '' ? \\$sMacAddress : @IPAddress1",
            "EndFunc"
        ],
        "description": "Get MAC address or if not found the IP address.",
        "prefix": "!_GetMacOrIpAddress"
    },
    "GetMonitorResolution": {
        "body": [
            "Func _GetMonitorResolution()",
            "    Local \\$aPosition, \\$aMonitorData = _WinAPI_EnumDisplayMonitors()",
            "",
            "    If IsArray(\\$aMonitorData) Then",
            "        ReDim \\$aMonitorData[\\$aMonitorData[0][0] + 1][5]",
            "        For \\$i = 1 To \\$aMonitorData[0][0] Step 1",
            "            \\$aPosition = _WinAPI_GetPosFromRect(\\$aMonitorData[\\$i][1])",
            "            For \\$j = 0 To 3 Step 1",
            "                \\$aMonitorData[\\$i][\\$j + 1] = \\$aPosition[\\$j]",
            "            Next",
            "        Next",
            "    EndIf",
            "",
            "    Return \\$aMonitorData",
            "EndFunc"
        ],
        "description": "Get monitor resolution data as array.",
        "prefix": "!_GetMonitorResolution"
    },
    "GetProcessPathByPid": {
        "body": [
            "Func _GetProcessPathByPid(\\$iPid = -1)",
            "    If \\$iPid = -1 Then \\$iPid = WinGetProcess(WinGetTitle('[active]'))",
            "",
            "    Local \\$hProcess = _WinAPI_OpenProcess(0x00000400, True, \\$iPid, True)",
            "    Local \\$strPath  = DllStructCreate('char path[256]')",
            "    Local \\$aRet, \\$sDeviceLetter",
            "",
            "    DllCall(@SystemDir & '\\Psapi.dll', 'uint64', 'GetProcessImageFileNameA', 'hwnd', \\$hProcess, 'ptr', DllStructGetPtr(\\$strPath), 'int', 256)",
            "",
            "    Local \\$sPath  = DllStructGetData(\\$strPath, 'path')",
            "    If \\$sPath    == '' Then Return -1",
            "",
            "    Local \\$aDevicePath = StringRegExp(\\$sPath, '\\\\\\\\Device\\\\\\\\\\\\w*', 1)",
            "    Local \\$aDrive      = DriveGetDrive('ALL')",
            "    Local \\$lpTargetPath",
            "",
            "    For \\$i = 1 To UBound(\\$aDrive) - 1 Step 1",
            "        \\$aRet = DllCall('kernel32.dll', 'long', 'QueryDosDeviceA', 'str', \\$aDrive[\\$i], 'str', \\$lpTargetPath, 'long', 256)",
            "        If \\$aRet[2] == \\$aDevicePath[0] Then",
            "            \\$sDeviceLetter = \\$aDrive[\\$i]",
            "            ExitLoop",
            "        EndIf",
            "    Next",
            "",
            "    DllCall('kernel32.dll', 'long', 'CloseHandle', 'long', \\$hProcess)",
            "",
            "    Return StringReplace(\\$sPath, \\$aDevicePath[0], StringUpper(\\$sDeviceLetter))",
            "EndFunc"
        ],
        "description": "Get process path by process id (PID).",
        "prefix": "!_GetProcessPathByPid"
    },
    "MsgBoxWithoutStop": {
        "body": [
            "Func _MsgBoxWithoutStop(\\$iFlag, \\$sTitle, \\$sText, \\$iTimeout = 0)",
            "    Local \\$sAu3Exe  = '\"' & @AutoItExe & '\"'",
            "    Local \\$sParam   = ' /AutoIt3ExecuteLine '",
            "    Local \\$sMessage = '\"MsgBox(' & \\$iFlag & ', ''' & \\$sTitle & ''', ''' & \\$sText & ''', ''' & \\$iTimeout & ''')\"'",
            "",
            "    Return Run(\\$sAu3Exe & \\$sParam & \\$sMessage)",
            "EndFunc"
        ],
        "description": "Show a message box without stop/pause the program execution.",
        "prefix": "!_MsgBoxWithoutStop"
    },
    "RunProgram": {
        "body": [
            "Func _RunProgram(\\$sProgramExeFilePath, \\$sParams = '', \\$bOnlyTest = False,  \\$bWaitAfterRun = False, \\$bHidden = True)",
            "    Local \\$sWaitCommand         = ' /C '",
            "    Local \\$sDriveLetter         = StringLeft(\\$sProgramExeFilePath, 1)",
            "    Local \\$sChangeDriveCommand  = \\$sDriveLetter & ': && '",
            "    Local \\$sExeFileName         = StringRegExpReplace(\\$sProgramExeFilePath, '(.+?)\\\\\\', '', 0)",
            "    Local \\$sExeFolder           = StringTrimRight(\\$sProgramExeFilePath, StringLen(\\$sExeFileName))",
            "    Local \\$sChangeDirCommand    = 'cd \"' & \\$sExeFolder & '\" '",
            "    Local \\$sCallProgrammCommand = '&& \"' & \\$sExeFileName & '\"'",
            "    Local \\$sParamsCommand       = ''",
            "    Local \\$sVisibility          = @SW_HIDE",
            "",
            "    If \\$sParams <> '' Then",
            "        \\$sParamsCommand = ' ' & \\$sParams",
            "    EndIf",
            "",
            "    If \\$bOnlyTest Then",
            "        ConsoleWrite(\\$sChangeDriveCommand & \\$sChangeDirCommand & \\$sCallProgrammCommand & \\$sParamsCommand & @CRLF)",
            "",
            "        Return",
            "    EndIf",
            "",
            "    If \\$bWaitAfterRun Then",
            "        \\$sWaitCommand = ' /K '",
            "    EndIf",
            "",
            "    If Not \\$bHidden Then",
            "        \\$sVisibility = @SW_SHOW",
            "    EndIf",
            "",
            "    ShellExecuteWait(@ComSpec, \\$sWaitCommand & \\$sChangeDriveCommand & \\$sChangeDirCommand & \\$sCallProgrammCommand & \\$sParamsCommand, '', '', \\$sVisibility)",
            "EndFunc"
        ],
        "description": "Runs external program with or without parameter in a quite robust way.",
        "prefix": "!_RunProgram"
    },
    "SetDisplayResolution": {
        "body": [
            "Func _SetDisplayResolution(\\$iDisplayWidth, \\$iDisplayHeight)",
            "    Local Const \\$CDS_TEST               = 0x00000002",
            "    Local Const \\$CDS_UPDATEREGISTRY     = 0x00000001",
            "    Local Const \\$DM_BITSPERPEL          = 0x00040000",
            "    Local Const \\$DM_DISPLAYFREQUENCY    = 0x00400000",
            "    Local Const \\$DM_PELSHEIGHT          = 0x00100000",
            "    Local Const \\$DM_PELSWIDTH           = 0x00080000",
            "    Local Const \\$HWND_BROADCAST         = 0xffff",
            "    Local Const \\$WM_DISPLAYCHANGE       = 0x007E",
            "",
            "    Local \\$iDisplayDepthInBitsPerPixel  = @DesktopDepth",
            "    Local \\$iDisplayRefreshRateInHertz   = @DesktopRefresh",
            "",
            "    Local \\$tDEVMODE                     = DllStructCreate('byte[32];int[10];byte[32];int[6]')",
            "    Local \\$aEnumDisplaySettingsResult   = DllCall('user32.dll', 'int', 'EnumDisplaySettings', 'ptr', 0, 'long', 0, 'ptr', DllStructGetPtr(\\$tDEVMODE))",
            "",
            "    If @error Then Return -1",
            "    If Not IsArray(\\$aEnumDisplaySettingsResult) Then Return -2",
            "    If \\$aEnumDisplaySettingsResult[0] == 0 Then Return -3",
            "",
            "    DllStructSetData(\\$tDEVMODE, 2, BitOR(\\$DM_PELSWIDTH, \\$DM_PELSHEIGHT, \\$DM_BITSPERPEL, \\$DM_DISPLAYFREQUENCY), 5)",
            "    DllStructSetData(\\$tDEVMODE, 4, \\$iDisplayWidth, 2)",
            "    DllStructSetData(\\$tDEVMODE, 4, \\$iDisplayHeight, 3)",
            "    DllStructSetData(\\$tDEVMODE, 4, \\$iDisplayDepthInBitsPerPixel, 1)",
            "    DllStructSetData(\\$tDEVMODE, 4, \\$iDisplayRefreshRateInHertz, 5)",
            "",
            "    Local \\$aChangeDisplaySettingsResult = DllCall('user32.dll', 'int', 'ChangeDisplaySettings', 'ptr', DllStructGetPtr(\\$tDEVMODE), 'int', \\$CDS_TEST)",
            "",
            "    If @error Then Return -4",
            "    If Not IsArray(\\$aChangeDisplaySettingsResult) Then Return -5",
            "",
            "    If \\$aChangeDisplaySettingsResult[0] == 0 Then",
            "        DllCall('user32.dll', 'int', 'ChangeDisplaySettings', 'ptr', DllStructGetPtr(\\$tDEVMODE), 'int', \\$CDS_UPDATEREGISTRY)",
            "        DllCall('user32.dll', 'int', 'SendMessage', 'hwnd', \\$HWND_BROADCAST, 'int', \\$WM_DISPLAYCHANGE, 'int', \\$iDisplayDepthInBitsPerPixel, 'int', \\$iDisplayHeight * 2 ^ 16 + \\$iDisplayWidth)",
            "    EndIf",
            "",
            "    \\$tDEVMODE = ''",
            "EndFunc"
        ],
        "description": "Set display resolution to specific display width and height.",
        "prefix": "!_SetDisplayResolution"
    },
    "TalkOverPcVoice": {
        "body": [
            "Func _TalkOverPcVoice(\\$sText = 'This is a test.', \\$iVolume = 75)",
            "    Local \\$objSpeech = ObjCreate('SAPI.SpVoice')",
            "    \\$objSpeech.Rate = -0.8",
            "    \\$objSpeech.Volume = \\$iVolume",
            "    \\$objSpeech.Speak('<pitch middle=''0''>' & \\$sText)",
            "    \\$objSpeech = ''",
            "EndFunc"
        ],
        "description": "Let the computer read out your text by the use of the SAPI API.",
        "prefix": "!_TalkOverPcVoice"
    },
    "Template": {
        "body": [
            "; compiler information for AutoIt",
            "#pragma compile(CompanyName, © Name)",
            "#pragma compile(FileVersion, 1.0.0)",
            "#pragma compile(LegalCopyright, © Author)",
            "#pragma compile(ProductName, ProgramName)",
            "#pragma compile(ProductVersion, 1.0.0 - YYYY-MM-DD)",
            "",
            "#AutoIt3Wrapper_AU3Check_Stop_OnWarning=y",
            "#AutoIt3Wrapper_Icon=..\\media\\favicon.ico",
            "#AutoIt3Wrapper_Outfile_x64=..\\build\\ProgramName.exe",
            "#AutoIt3Wrapper_UseUpx=n",
            "#AutoIt3Wrapper_UseX64=y",
            "",
            "",
            "",
            "; opt and just singleton -------------------------------------------------------",
            "Opt( 'MustDeclareVars', 1 )",
            "Global \\$aInst = ProcessList( 'ProgramName.exe' )",
            "If \\$aInst[0][0] > 1 Then Exit",
            "",
            "",
            "",
            "; includes ---------------------------------------------------------------------",
            "#include-once",
            "",
            "",
            "",
            "; declaration ------------------------------------------------------------------",
            "Global \\$sVar = ''",
            "",
            "",
            "",
            "; processing -------------------------------------------------------------------",
            "_DummyFunc()",
            "",
            "",
            "",
            "; functions --------------------------------------------------------------------",
            "Func _DummyFunc()",
            "",
            "EndFunc"
        ],
        "description": "Creates a short script template to structure your code.",
        "prefix": "!_Template"
    },
    "ToggleDesktopIcons": {
        "body": [
            "Func _ToggleDesktopIcons()",
            "    DllCall('user32.dll', 'lresult', 'SendMessage', 'hwnd', ControlGetHandle('[CLASS:Progman]', '', '[CLASS:SHELLDLL_DefView]'), 'uint', 0x0111, 'wparam', 29698, 'lparam', 0)",
            "EndFunc"
        ],
        "description": "Toggles the visibility of the desktop icons.",
        "prefix": "!_ToggleDesktopIcons"
    }
}
