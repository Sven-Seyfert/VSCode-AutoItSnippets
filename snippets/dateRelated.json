{
    "CalendarWeekToDays": {
        "body": [
            "Func _calendarWeekToDays( $$iKW, $$iYear = @YEAR )",
            "    Local $$iDateReduce, $$iMaxWeeks, $$aReturnDate[8]",
            "    Local $$s4thJanuary = _DateToDayOfWeek( $$iYear, '01', '04' )",
            "    Local $$s1thJanuary = _DateToDayOfWeek( $$iYear, '01', '01' )",
            "",
            "    For $$i = 1 To 6 Step 1",
            "        $$iDateReduce    =  $$s4thJanuary - $$i",
            "        If $$iDateReduce == 2 Then ExitLoop",
            "    Next",
            "",
            "    Local $$sFirstDayWeekISO = _DateAdd( 'D', -$$i, $$iYear & '/01/04' )",
            "",
            "    Switch $$s1thJanuary",
            "        Case 5",
            "            $$iMaxWeeks = 53",
            "        Case 4",
            "            If _DateIsLeapYear( $$iYear ) Then",
            "                $$iMaxWeeks = 53",
            "            Else",
            "                $$iMaxWeeks = 52",
            "            EndIf",
            "        Case Else",
            "            $$iMaxWeeks = 52",
            "    EndSwitch",
            "",
            "    If $$iMaxWeeks == 52 And $$iKW == 53 Then",
            "        MsgBox( 16, 'Error', 'The given year only got 52 calendar weeks.', 30 )",
            "        Return -1",
            "    EndIf",
            "",
            "    $$aReturnDate[0] = $$iMaxWeeks",
            "",
            "    For $$i = 1 To 7 Step 1",
            "        $$aReturnDate[$$i] = _DateAdd( 'w', $$iKW - 1, _DateAdd( 'D', $$i - 1, $$sFirstDayWeekISO ) )",
            "    Next",
            "",
            "    Return $$aReturnDate",
            "EndFunc"
        ],
        "description": "Get an array of days from the given calendar week.",
        "prefix": "!au3_calendarWeekToDays"
    },
    "GetDateDiffByBoundary": {
        "body": [
            "Func _getDateDiffByBoundary( $$iDayBoundary = -90 )",
            "    Return _DateAdd( 'D', $$iDayBoundary, _NowCalcDate() )",
            "EndFunc"
        ],
        "description": "Get date diff by boundary (e. g. 90 days from the current day).",
        "prefix": "!au3_getDateDiffByBoundary"
    },
    "GetDateTime": {
        "body": [
            "Func _getDateTime( $$sChar = ' ' )",
            "    Return @YEAR & '-' & @MON & '-' & @MDAY & $$sChar & @HOUR & ':' & @MIN & ':' & @SEC",
            "EndFunc"
        ],
        "description": "Get current date and time as a timestamp.",
        "prefix": "!au3_getDateTime"
    },
    "GetHHMMSSOfSeconds": {
        "body": [
            "Func _getHHMMSSOfSeconds( $$iGivenSeconds )",
            "    Local $$iHours   = Int( $$iGivenSeconds / 3600 )",
            "    Local $$iMinutes = Int( Mod( $$iGivenSeconds, 3600 ) / 60 )",
            "    Local $$iSeconds = Mod( $$iGivenSeconds, 60 )",
            "",
            "    If $$iHours > 0 Then",
            "        Return StringFormat( '%02d:%02d:%02d', $$iHours, $$iMinutes, $$iSeconds )",
            "    EndIf",
            "",
            "    Return StringFormat( '%02d:%02d', $$iMinutes, $$iSeconds )",
            "EndFunc"
        ],
        "description": "Get hours, minutes and seconds of given seconds (reverse of _getSecondsOfHHMMSS).",
        "prefix": "!au3_getHHMMSSOfSeconds"
    },
    "GetSecondsOfHHMMSS": {
        "body": [
            "Func _getSecondsOfHHMMSS( $$sDurationHHMMSS )",
            "    Local $$iHours    = Int( StringLeft( $$sDurationHHMMSS, 2 ) )",
            "    Local $$iMinutes  = Int( StringMid( $$sDurationHHMMSS, 3, 2 ) )",
            "    Local $$iSeconds  = Int( StringRight( $$sDurationHHMMSS, 2 ) )",
            "    Local $$iDuration = 0",
            "",
            "    If $$iHours > 0   Then $$iDuration += ( $$iHours * 3600 )",
            "    If $$iMinutes > 0 Then $$iDuration += ( $$iMinutes * 60 )",
            "",
            "    Return $$iDuration + $$iSeconds",
            "EndFunc"
        ],
        "description": "Get seconds of given hours, minutes and seconds (reverse of _getHHMMSSOfSeconds).",
        "prefix": "!au3_getSecondsOfHHMMSS"
    },
    "GetTimerDiffInSecOrMin": {
        "body": [
            "Func _getTimerDiffInSecOrMin( $$hTimer, $$bInSeconds = True )",
            "    If $$bInSeconds Then",
            "        Return Round( ( TimerDiff( $$hTimer ) / 1000 ), 2 )",
            "    EndIf",
            "",
            "    Return Round( ( ( TimerDiff( $$hTimer ) / 1000 ) / 60 ), 2 )",
            "EndFunc"
        ],
        "description": "Get timer diff in seconds or minutes.",
        "prefix": "!au3_getTimerDiffInSecOrMin"
    }
}
